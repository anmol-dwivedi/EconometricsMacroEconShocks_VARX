# -*- coding: utf-8 -*-
"""EDA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VIdjXh3wHO8myd2gBn6N2lpHrtIAqm1x
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

from sklearn.preprocessing import StandardScaler
import warnings
from statsmodels.tsa.stattools import adfuller, kpss
from statsmodels.tsa.api import VAR
from statsmodels.tsa.statespace.varmax import VARMAX
import pickle


import datetime
import sys
import os
import openpyxl
import xlrd

"""# Read in the Consolidated Dataset"""

df = pd.read_csv('Econ_Project_Data_Consolidated.csv')
df["Date"] = pd.to_datetime(df["Date"])

df.head(5)

df.info()

df.shape

variables_to_plot = [
    "Average_Hourly_Earning", "Trade_Volume_Pct_Change_Index_Value",
    "US_Crude_Oil_Prices_Dollar_Per_Barrel", "Federal_Rates_Monthly",
    "CPI_Value_Inflation", "Nominal_Broad_US_Dollar_Index",
    "producer_price_index_all_commodities", "Adjusted_Closing_Price",
    "US_Export_to_Russia", "US_Unemployment_Rate", "US_Consumer_Sentiment",
    "US_Gasoline_Dollars_Per_Barrel", "Price", "US_Mean_Monthly_Market_Volatility"
]

"""# Time Series Plots"""

# Plotting each time series on one row using the existing flags for highlighting
plt.figure(figsize=(20,60))

for i, variable in enumerate(variables_to_plot, 1):
    plt.subplot(len(variables_to_plot), 1, i)
    plt.plot(df["Date"], df[variable], label=variable)

    # Highlighting the Russia-Ukraine conflict period using the existing flag
    plt.fill_between(
        df["Date"],
        df[variable].min(), df[variable].max(),
        where=(df["Russia_Ukraine_Date_Flag"] == 1),
        color='red', alpha=0.2, label='Russia-Ukraine Conflict'
    )

    # Highlighting the Covid period using the existing flag
    plt.fill_between(
        df["Date"],
        df[variable].min(), df[variable].max(),
        where=(df["Covid_Flag"] == 1),
        color='blue', alpha=0.2, label='Covid Period'
    )

    plt.title(f'{variable} Over Time')
    plt.xlabel('Date')
    plt.xticks(rotation=60)
    plt.ylabel(variable)
    plt.legend()

plt.tight_layout()
plt.show()
plt.savefig('timeseries.png')

"""# Pre War and Post War Plots"""

import matplotlib.pyplot as plt
import pandas as pd

# Ensure that only the desired variables are included, excluding 'Date'
variables_to_plot = [
    "Average_Hourly_Earning", "Trade_Volume_Pct_Change_Index_Value",
    "US_Crude_Oil_Prices_Dollar_Per_Barrel", "Federal_Rates_Monthly",
    "CPI_Value_Inflation", "Nominal_Broad_US_Dollar_Index",
    "producer_price_index_all_commodities", "Adjusted_Closing_Price",
    "US_Export_to_Russia", "US_Unemployment_Rate", "US_Consumer_Sentiment",
    "US_Gasoline_Dollars_Per_Barrel", "Price", "US_Mean_Monthly_Market_Volatility"
]

# Plotting each time series on one row using the existing flags for highlighting
plt.figure(figsize=(14, len(variables_to_plot) * 3))

for i, variable in enumerate(variables_to_plot, 1):
    plt.subplot(len(variables_to_plot), 1, i)
    plt.plot(df["Date"], df[variable], label=variable, color='orange')

    # Highlighting pre- and post-conflict periods using the Russia-Ukraine flag
    plt.axvspan(df["Date"].min(), pd.Timestamp('2022-02-01'), color='lightgrey', alpha=0.5, label='Pre-Conflict')
    plt.axvspan(pd.Timestamp('2022-02-01'), df["Date"].max(), color='lightcoral', alpha=0.5, label='Post-Conflict')

    plt.title(f'Pre- and Post-Conflict Comparison: {variable}')
    plt.xlabel('Date')
    plt.xticks(rotation=60)
    plt.ylabel(variable)
    plt.legend()

plt.tight_layout()
plt.savefig('Timeseries_Plots.png')
plt.show()

"""# Pairwise Relations"""

import matplotlib.pyplot as plt

# Expanded list of variable pairs to plot
variable_pairs = [
    ("US_Crude_Oil_Prices_Dollar_Per_Barrel", "CPI_Value_Inflation"),
    ("US_Unemployment_Rate", "CPI_Value_Inflation"),
    ("Adjusted_Closing_Price", "US_Consumer_Sentiment"),
    ("Trade_Volume_Pct_Change_Index_Value", "Federal_Rates_Monthly"),
    ("Nominal_Broad_US_Dollar_Index", "US_Export_to_Russia"),
    ("producer_price_index_all_commodities", "CPI_Value_Inflation"),
    ("US_Gasoline_Dollars_Per_Barrel", "US_Crude_Oil_Prices_Dollar_Per_Barrel"),
    ("US_Mean_Monthly_Market_Volatility", "Adjusted_Closing_Price")
]

# Setting the number of rows and columns for 2 plots per row
num_plots = len(variable_pairs)
num_cols = 2
num_rows = (num_plots // num_cols) + (num_plots % num_cols > 0)

# Plotting scatter plots for all variable pairs
plt.figure(figsize=(16, 20))

for i, (var_x, var_y) in enumerate(variable_pairs, 1):
    plt.subplot(num_rows, num_cols, i)
    plt.scatter(df[var_x], df[var_y], alpha=0.6, edgecolor='k')
    plt.title(f'{var_x} vs. {var_y}')
    plt.xlabel(var_x)
    plt.ylabel(var_y)

plt.tight_layout()
plt.savefig('pairwise.png')
plt.show()

numerical_columns = [
    "Average_Hourly_Earning", "Trade_Volume_Pct_Change_Index_Value",
    "US_Crude_Oil_Prices_Dollar_Per_Barrel", "Federal_Rates_Monthly",
    "CPI_Value_Inflation", "Nominal_Broad_US_Dollar_Index",
    "producer_price_index_all_commodities", "Adjusted_Closing_Price",
    "US_Export_to_Russia", "US_Unemployment_Rate", "US_Consumer_Sentiment",
    "US_Gasoline_Dollars_Per_Barrel", "Price", "US_Mean_Monthly_Market_Volatility"
]

# Creating a pairplot for all numerical variables
sns.pairplot(df[numerical_columns])
plt.show()

"""# Heatmap"""

# Calculating the correlation matrix
correlation_matrix = df[numerical_columns].corr()

# Plotting the heatmap
plt.figure(figsize=(14, 10))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f", linewidths=0.5)
plt.title("Correlation Heatmap of Numerical Variables")
plt.show()

"""# Histogram and Density Plots"""

import seaborn as sns
import matplotlib.pyplot as plt



numerical_columns = [
    "Average_Hourly_Earning", "Trade_Volume_Pct_Change_Index_Value",
    "US_Crude_Oil_Prices_Dollar_Per_Barrel", "Federal_Rates_Monthly",
    "CPI_Value_Inflation", "Nominal_Broad_US_Dollar_Index",
    "producer_price_index_all_commodities", "Adjusted_Closing_Price",
    "US_Export_to_Russia", "US_Unemployment_Rate", "US_Consumer_Sentiment",
    "US_Gasoline_Dollars_Per_Barrel", "Price", "US_Mean_Monthly_Market_Volatility"
]


# Plotting histograms and density plots for each variable
plt.figure(figsize=(16, len(numerical_columns) * 3))

for i, column in enumerate(numerical_columns, 1):
    plt.subplot(len(numerical_columns), 2, 2 * i - 1)
    sns.histplot(df[column], kde=False, color='skyblue')
    plt.title(f'Histogram of {column}')
    plt.xlabel(column)
    plt.ylabel('Frequency')

    plt.subplot(len(numerical_columns), 2, 2 * i)
    sns.kdeplot(df[column], color='orange')
    plt.title(f'Density Plot of {column}')
    plt.xlabel(column)
    plt.ylabel('Density')

plt.tight_layout()
plt.savefig("histogram and densitplots.png")
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt

# Variables of interest
selected_columns = [
    "CPI_Value_Inflation",
    "US_Crude_Oil_Prices_Dollar_Per_Barrel"
]

# Plotting histograms and density plots for the selected variables
plt.figure(figsize=(16, len(selected_columns) * 3))

for i, column in enumerate(selected_columns, 1):
    plt.subplot(len(selected_columns), 2, 2 * i - 1)
    sns.histplot(df[column], kde=False, color='skyblue')
    plt.title(f'Histogram of {column}')
    plt.xlabel(column)
    plt.ylabel('Frequency')

    plt.subplot(len(selected_columns), 2, 2 * i)
    sns.kdeplot(df[column], color='orange')
    plt.title(f'Density Plot of {column}')
    plt.xlabel(column)
    plt.ylabel('Density')

plt.tight_layout()
plt.savefig("selected_histogram_and_density_plots.png")
plt.show()

"""# Box Plots"""

# Plotting box plots for each variable
plt.figure(figsize=(16, len(numerical_columns) * 2))

for i, column in enumerate(numerical_columns, 1):
    plt.subplot(len(numerical_columns), 1, i)
    sns.boxplot(x=df[column], color='lightblue')
    plt.title(f'Box Plot of {column}')
    plt.xlabel(column)

plt.tight_layout()
plt.show()

"""# Event Study Plot"""

import matplotlib.pyplot as plt

# List of key economic variables for the event study
event_study_variables = numerical_columns

# Defining the event periods
covid_start = pd.Timestamp("2020-01-20")
covid_end = pd.Timestamp("2023-05-11")
conflict_start = pd.Timestamp("2022-02-01")
conflict_end = df["Date"].max()

# Plotting each variable with two plots: one for COVID-19 and one for the Russia-Ukraine conflict
plt.figure(figsize=(14, len(event_study_variables) * 5))

for i, variable in enumerate(event_study_variables):
    # Plot highlighting the COVID-19 period
    plt.subplot(len(event_study_variables), 2, 2 * i + 1)
    plt.plot(df["Date"], df[variable], label=variable, color='black')
    plt.axvspan(covid_start, covid_end, color='blue', alpha=0.2, label='COVID-19 Period')
    plt.title(f'{variable} with COVID-19 Period Highlighted')
    plt.xlabel('Date')
    plt.ylabel(variable)
    plt.legend()

    # Plot highlighting the Russia-Ukraine conflict period
    plt.subplot(len(event_study_variables), 2, 2 * i + 2)
    plt.plot(df["Date"], df[variable], label=variable, color='black')
    plt.axvspan(conflict_start, conflict_end, color='red', alpha=0.2, label='Russia-Ukraine Conflict Period')
    plt.title(f'{variable} with Russia-Ukraine Conflict Period Highlighted')
    plt.xlabel('Date')
    plt.ylabel(variable)
    plt.legend()

plt.tight_layout()
plt.show()

"""## Correlation Analysis of the Stationary Data"""

df_stat = pd.read_csv('Econ_Data_Stationary.csv')
df_stat.head()

# Var model needs the date time as index
# df_stat['Date'] = pd.to_datetime(df_stat['Date'])
# df_stat = df_stat.set_index('Date')

# # Explicitly set the frequency to 'MS' (Monthly Start)
# df_stat = df_stat.asfreq('MS')



# Exclude the exogenous variables 'Russia_Ukraine_Date_Flag' and 'Covid_Flag'
endogenous_variables = df_stat.drop(columns=['Russia_Ukraine_Date_Flag', 'Covid_Flag'])

# Step 2: Calculate the correlation matrix using Pearson, Spearman, or Kendall
# Choose the method: 'pearson', 'spearman', or 'kendall'
correlation_matrix = endogenous_variables.corr(method='pearson')  # You can change 'pearson' to 'spearman' or 'kendall'

# Step 3: Plot the correlation matrix using a heatmap
plt.figure(figsize=(15, 15))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f", linewidths=0.5)
plt.title("Correlation Matrix of Endogenous Variables (Excluding Exogenous Variables)")
plt.savefig('Correlation for Stationary data.png')
plt.show()

